saveRDS(thisMset, paste0(qsDir,"/RDS_Files/",file="",thisLibrary,".RDS"))
}
)
sapply(qsFiles, function(f){
thisLibrary=strsplit(f,"[.]")[[1]][1]
thisTime<-qread(file.path(qsDir,f))
thisMset <- sapply(
1:length(thisTime$name), function(x){
thisPath=thisTime[x,"name"]
thisPathId=thisTime[x,"id"]
theseMembers=list(strsplit(thisTime[x,"member"], "; ")[[1]])[[1]]
print(theseMembers)
theseMembersByHMDBID=metaboliteMappingTable(theseMembers, outputColumns = c(
"Query","HMDB"
))
print(theseMembersByHMDBID$HMDB)
myList=list(theseMembersByHMDBID[["HMDB"]])
names(myList)=paste(thisPath,thisPathId,sep=name_delim)
myList
}
)
saveRDS(thisMset, paste0(qsDir,"/RDS_Files/",file="",thisLibrary,".RDS"))
}
)
sapply(qsFiles, function(f){
thisLibrary=strsplit(f,"[.]")[[1]][1]
thisTime<-qread(file.path(qsDir,f))
thisMset <- sapply(
1:length(thisTime$name), function(x){
thisPath=thisTime[x,"name"]
thisPathId=thisTime[x,"id"]
theseMembers=list(strsplit(thisTime[x,"member"], "; ")[[1]])[[1]]
theseMembersByHMDBID=metaboliteMappingTable(unlist(theseMembers, use.names = F), outputColumns = c(
"Query","HMDB"
))
myList=list(theseMembersByHMDBID[["HMDB"]])
names(myList)=paste(thisPath,thisPathId,sep=name_delim)
myList
}
)
saveRDS(thisMset, paste0(qsDir,"/RDS_Files/",file="",thisLibrary,".RDS"))
}
)
sapply(qsFiles, function(f){
thisLibrary=strsplit(f,"[.]")[[1]][1]
thisTime<-qread(file.path(qsDir,f))
thisMset <- sapply(
1:length(thisTime$name), function(x){
thisPath=thisTime[x,"name"]
thisPathId=thisTime[x,"id"]
theseMembers=list(strsplit(thisTime[x,"member"], "; ")[[1]])[[1]]
print(unlist(theseMembers))
theseMembersByHMDBID=metaboliteMappingTable(unlist(theseMembers, use.names = F), outputColumns = c(
"Query","HMDB"
))
myList=list(theseMembersByHMDBID[["HMDB"]])
names(myList)=paste(thisPath,thisPathId,sep=name_delim)
myList
}
)
saveRDS(thisMset, paste0(qsDir,"/RDS_Files/",file="",thisLibrary,".RDS"))
}
)
metaboliteMappingTable <-
function(nameVec,
outputColumns = c(
"Query", "Match", "HMDB",
"KEGG", "PubChem", "ChEBI", "SMILES"
)
) {
# First create a list containing a vector of the compounds to be queried (separated by a semi-colon)
# and another character vector containing the compound id type.
# The items in the list MUST be queryList and inputType
# Valid input types are: "name", "hmdb", "kegg", "pubchem", "chebi", "metlin"
toSend = list(queryList = nameVec, inputType = "name")
# The MetaboAnalyst API url
call <- "http://api.xialab.ca/mapcompounds"
# Use httr::POST to send the request to the MetaboAnalyst API
# The response will be saved in query_results
query_results <- httr::POST(call, body = toSend, encode = "json")
# Check if response is ok (TRUE)
# 200 is ok! 401 means an error has occured on the user's end.
query_results$status_code==200
# Parse the response into a table
# Will show mapping to "hmdb_id", "kegg_id", "pubchem_id", "chebi_id", "metlin_id", "smiles"
query_results_text <- content(query_results, "text", encoding = "UTF-8")
query_results_json <- RJSONIO::fromJSON(query_results_text, simplifyVector=T, simplifyDataFrame=T, flatten = T)
query_results_table <- (cbind.data.frame(query_results_json[outputColumns]))
rownames(query_results_table) <- query_results_table$Query
return(query_results_table)
}
if(T){
ugh=metaboliteMappingTable(name.vec)
}
ugh
rownames(ugh)==ugh$Match
metaboliteMappingTable <-
function(nameVec,
outputColumns = c(
"Query", "Match", "HMDB",
"KEGG", "PubChem", "ChEBI", "SMILES"
)
) {
# First create a list containing a vector of the compounds to be queried (separated by a semi-colon)
# and another character vector containing the compound id type.
# The items in the list MUST be queryList and inputType
# Valid input types are: "name", "hmdb", "kegg", "pubchem", "chebi", "metlin"
toSend = list(queryList = nameVec, inputType = "name")
# The MetaboAnalyst API url
call <- "http://api.xialab.ca/mapcompounds"
# Use httr::POST to send the request to the MetaboAnalyst API
# The response will be saved in query_results
query_results <- httr::POST(call, body = toSend, encode = "json")
# Check if response is ok (TRUE)
# 200 is ok! 401 means an error has occured on the user's end.
query_results$status_code==200
# Parse the response into a table
# Will show mapping to "hmdb_id", "kegg_id", "pubchem_id", "chebi_id", "metlin_id", "smiles"
query_results_text <- content(query_results, "text", encoding = "UTF-8")
query_results_json <- RJSONIO::fromJSON(query_results_text, simplifyVector=T, simplifyDataFrame=T, flatten = T)
print(mean(query_results_json$Query==query_results_json$Match))
query_results_table <- (cbind.data.frame(query_results_json[outputColumns]))
rownames(query_results_table) <- query_results_table$Query
return(query_results_table)
}
if(T){
ugh=metaboliteMappingTable(name.vec)
}
sapply(qsFiles, function(f){
thisLibrary=strsplit(f,"[.]")[[1]][1]
thisTime<-qread(file.path(qsDir,f))
thisMset <- sapply(
1:length(thisTime$name), function(x){
thisPath=thisTime[x,"name"]
thisPathId=thisTime[x,"id"]
theseMembers=list(strsplit(thisTime[x,"member"], "; ")[[1]])[[1]]
print(unlist(theseMembers))
theseMembersByHMDBID=metaboliteMappingTable(unlist(theseMembers, use.names = F), outputColumns = c(
"Query","HMDB"
))
myList=list(theseMembersByHMDBID[["HMDB"]])
names(myList)=paste(thisPath,thisPathId,sep=name_delim)
myList
}
)
saveRDS(thisMset, paste0(qsDir,"/RDS_Files/",file="",thisLibrary,".RDS"))
}
)
metaboliteMappingTable <-
function(nameVec,
outputColumns = c(
"Query", "Match", "HMDB",
"KEGG", "PubChem", "ChEBI", "SMILES"
)
) {
# First create a list containing a vector of the compounds to be queried (separated by a semi-colon)
# and another character vector containing the compound id type.
# The items in the list MUST be queryList and inputType
# Valid input types are: "name", "hmdb", "kegg", "pubchem", "chebi", "metlin"
toSend = list(queryList = nameVec, inputType = "name")
# The MetaboAnalyst API url
call <- "http://api.xialab.ca/mapcompounds"
# Use httr::POST to send the request to the MetaboAnalyst API
# The response will be saved in query_results
query_results <- httr::POST(call, body = toSend, encode = "json")
# Check if response is ok (TRUE)
# 200 is ok! 401 means an error has occured on the user's end.
query_results$status_code==200
# Parse the response into a table
# Will show mapping to "hmdb_id", "kegg_id", "pubchem_id", "chebi_id", "metlin_id", "smiles"
query_results_text <- content(query_results, "text", encoding = "UTF-8")
query_results_json <- RJSONIO::fromJSON(query_results_text, simplifyVector=T, simplifyDataFrame=T, flatten = T)
successfulMaps=(query_results_json$Query==query_results_json$Match)
# since we're working with queries of common names
# which may not always work, only keep those with
# successful hits
query_results_table <- (cbind.data.frame(query_results_json[successfulMaps,outputColumns]))
rownames(query_results_table) <- query_results_table$Query
return(query_results_table)
}
if(T){
ugh=metaboliteMappingTable(name.vec)
}
print(successfulMaps)
metaboliteMappingTable <-
function(nameVec,
outputColumns = c(
"Query", "Match", "HMDB",
"KEGG", "PubChem", "ChEBI", "SMILES"
)
) {
# First create a list containing a vector of the compounds to be queried (separated by a semi-colon)
# and another character vector containing the compound id type.
# The items in the list MUST be queryList and inputType
# Valid input types are: "name", "hmdb", "kegg", "pubchem", "chebi", "metlin"
toSend = list(queryList = nameVec, inputType = "name")
# The MetaboAnalyst API url
call <- "http://api.xialab.ca/mapcompounds"
# Use httr::POST to send the request to the MetaboAnalyst API
# The response will be saved in query_results
query_results <- httr::POST(call, body = toSend, encode = "json")
# Check if response is ok (TRUE)
# 200 is ok! 401 means an error has occured on the user's end.
query_results$status_code==200
# Parse the response into a table
# Will show mapping to "hmdb_id", "kegg_id", "pubchem_id", "chebi_id", "metlin_id", "smiles"
query_results_text <- content(query_results, "text", encoding = "UTF-8")
query_results_json <- RJSONIO::fromJSON(query_results_text, simplifyVector=T, simplifyDataFrame=T, flatten = T)
successfulMaps=(query_results_json$Query==query_results_json$Match)
print(successfulMaps)
# since we're working with queries of common names
# which may not always work, only keep those with
# successful hits
query_results_table <- (cbind.data.frame(query_results_json[successfulMaps,outputColumns]))
rownames(query_results_table) <- query_results_table$Query
return(query_results_table)
}
if(T){
ugh=metaboliteMappingTable(name.vec)
}
metaboliteMappingTable <-
function(nameVec,
outputColumns = c(
"Query", "Match", "HMDB",
"KEGG", "PubChem", "ChEBI", "SMILES"
)
) {
# First create a list containing a vector of the compounds to be queried (separated by a semi-colon)
# and another character vector containing the compound id type.
# The items in the list MUST be queryList and inputType
# Valid input types are: "name", "hmdb", "kegg", "pubchem", "chebi", "metlin"
toSend = list(queryList = nameVec, inputType = "name")
# The MetaboAnalyst API url
call <- "http://api.xialab.ca/mapcompounds"
# Use httr::POST to send the request to the MetaboAnalyst API
# The response will be saved in query_results
query_results <- httr::POST(call, body = toSend, encode = "json")
# Check if response is ok (TRUE)
# 200 is ok! 401 means an error has occured on the user's end.
query_results$status_code==200
# Parse the response into a table
# Will show mapping to "hmdb_id", "kegg_id", "pubchem_id", "chebi_id", "metlin_id", "smiles"
query_results_text <- content(query_results, "text", encoding = "UTF-8")
query_results_json <- jsonlite::fromJSON(query_results_text, simplifyVector=T, simplifyDataFrame=T, flatten = T)
successfulMaps=(query_results_json$Query==query_results_json$Match)
print(successfulMaps)
# since we're working with queries of common names
# which may not always work, only keep those with
# successful hits
query_results_table <- as.data.frame(query_results)#(cbind.data.frame(query_results_json[outputColumns]))
rownames(query_results_table) <- query_results_table$Query
return(query_results_table)
}
if(T){
ugh=metaboliteMappingTable(name.vec)
}
metaboliteMappingTable <-
function(nameVec,
outputColumns = c(
"Query", "Match", "HMDB",
"KEGG", "PubChem", "ChEBI", "SMILES"
)
) {
# First create a list containing a vector of the compounds to be queried (separated by a semi-colon)
# and another character vector containing the compound id type.
# The items in the list MUST be queryList and inputType
# Valid input types are: "name", "hmdb", "kegg", "pubchem", "chebi", "metlin"
toSend = list(queryList = nameVec, inputType = "name")
# The MetaboAnalyst API url
call <- "http://api.xialab.ca/mapcompounds"
# Use httr::POST to send the request to the MetaboAnalyst API
# The response will be saved in query_results
query_results <- httr::POST(call, body = toSend, encode = "json")
# Check if response is ok (TRUE)
# 200 is ok! 401 means an error has occured on the user's end.
query_results$status_code==200
# Parse the response into a table
# Will show mapping to "hmdb_id", "kegg_id", "pubchem_id", "chebi_id", "metlin_id", "smiles"
query_results_text <- content(query_results, "text", encoding = "UTF-8")
query_results_json <- jsonlite::fromJSON(query_results_text, simplifyVector=T, simplifyDataFrame=T, flatten = T)
successfulMaps=(query_results_json$Query==query_results_json$Match)
print(successfulMaps)
# since we're working with queries of common names
# which may not always work, only keep those with
# successful hits
query_results_table <- as.data.frame(query_results_json)#(cbind.data.frame(query_results_json[outputColumns]))
rownames(query_results_table) <- query_results_table$Query
return(query_results_table)
}
if(T){
ugh=metaboliteMappingTable(name.vec)
ugh
}
library(qs)
library(MetaboAnalystR)
source("metaboliteMappingTable.R")
qsDir<-"./"
qsFiles<-list.files(qsDir, pattern=".qs")
name_delim="_"
sapply(qsFiles, function(f){
thisLibrary=strsplit(f,"[.]")[[1]][1]
thisTime<-qread(file.path(qsDir,f))
thisMset <- sapply(
1:length(thisTime$name), function(x){
thisPath=thisTime[x,"name"]
thisPathId=thisTime[x,"id"]
theseMembers=list(strsplit(thisTime[x,"member"], "; ")[[1]])[[1]]
print(unlist(theseMembers))
theseMembersByHMDBID=metaboliteMappingTable(unlist(theseMembers, use.names = F), outputColumns = c(
"Query","HMDB"
))
myList=list(theseMembersByHMDBID[["HMDB"]])
names(myList)=paste(thisPath,thisPathId,sep=name_delim)
myList
}
)
saveRDS(thisMset, paste0(qsDir,"/RDS_Files/",file="",thisLibrary,".RDS"))
}
)
library(qs)
library(MetaboAnalystR)
source("metaboliteMappingTable.R")
qsDir<-"./"
qsFiles<-list.files(qsDir, pattern=".qs")
name_delim="_"
sapply(qsFiles, function(f){
thisLibrary=strsplit(f,"[.]")[[1]][1]
thisTime<-qread(file.path(qsDir,f))
thisMset <- sapply(
1:length(thisTime$name), function(x){
thisPath=thisTime[x,"name"]
thisPathId=thisTime[x,"id"]
theseMembers=list(strsplit(thisTime[x,"member"], "; ")[[1]])[[1]]
theseMembersByHMDBID=metaboliteMappingTable(unlist(theseMembers, use.names = F), outputColumns = c(
"Query","HMDB"
))
myList=list(theseMembersByHMDBID[["HMDB"]])
names(myList)=paste(thisPath,thisPathId,sep=name_delim)
myList
}
)
saveRDS(thisMset, paste0(qsDir,"/RDS_Files/",file="",thisLibrary,".RDS"))
}
)
qsDir<-"./"
qsFiles<-list.files(qsDir, pattern=".qs")[qsFiles != "compound_db.qs"]
qsFiles
qsFiles<-list.files(qsDir, pattern=".qs")[which(qsFiles != "compound_db.qs")]
qsFiles
compoundsReference = qread(file.path(qsDir,"compound_db.qs"))
compoundsReference$name
name.vec
cmpd.vec
cmpd.vec %in% compoundsReference$name
compoundsReference[compoundsReference$name %in% cmpd.vec, "hmdb_id"]
library(qs)
library(MetaboAnalystR)
source("metaboliteMappingTable.R")
qsDir<-"./"
qsFiles<-list.files(qsDir, pattern=".qs")[which(qsFiles != "compound_db.qs")]
compoundsReference = qread(file.path(qsDir,"compound_db.qs"))
name_delim="_"
sapply(qsFiles, function(f){
thisLibrary=strsplit(f,"[.]")[[1]][1]
thisTime<-qread(file.path(qsDir,f))
thisMset <- sapply(
1:length(thisTime$name), function(x){
thisPath=thisTime[x,"name"]
thisPathId=thisTime[x,"id"]
theseMembers=list(strsplit(thisTime[x,"member"], "; ")[[1]])[[1]]
theseMembersByHMDBID = compoundsReference[compoundsReference$name %in% unlist(theseMembers), "hmdb_id"]
myList=list(theseMembersByHMDBID)
names(myList)=paste(thisPath,thisPathId,sep=name_delim)
myList
}
)
1
#saveRDS(thisMset, paste0(qsDir,"/RDS_Files/",file="",thisLibrary,".RDS"))
}
)
library(qs)
library(MetaboAnalystR)
source("metaboliteMappingTable.R")
qsDir<-"./"
qsFiles<-list.files(qsDir, pattern=".qs")[which(qsFiles != "compound_db.qs")]
print(qsFiles)
compoundsReference = qread(file.path(qsDir,"compound_db.qs"))
name_delim="_"
sapply(qsFiles, function(f){
print(f)
thisLibrary=strsplit(f,"[.]")[[1]][1]
thisTime<-qread(file.path(qsDir,f))
thisMset <- sapply(
1:length(thisTime$name), function(x){
thisPath=thisTime[x,"name"]
thisPathId=thisTime[x,"id"]
theseMembers=list(strsplit(thisTime[x,"member"], "; ")[[1]])[[1]]
theseMembersByHMDBID=metaboliteMappingTable(unlist(theseMembers, use.names = F), outputColumns = c(
"Query","HMDB"
))
myList=list(theseMembersByHMDBID[["HMDB"]])
names(myList)=paste(thisPath,thisPathId,sep=name_delim)
myList
}
)
saveRDS(thisMset, paste0(qsDir,"/RDS_Files/",file="",thisLibrary,".RDS"))
}
)
sapply(qsFiles, function(f){
print(f)
thisLibrary=strsplit(f,"[.]")[[1]][1]
thisTime<-qread(file.path(qsDir,f))
thisMset <- sapply(
1:length(thisTime$name), function(x){
thisPath=thisTime[x,"name"]
thisPathId=thisTime[x,"id"]
theseMembers=list(strsplit(thisTime[x,"member"], "; ")[[1]])[[1]]
theseMembersByHMDBID = compoundsReference[compoundsReference$name %in% unlist(theseMembers), "hmdb_id"]
myList=list(theseMembersByHMDBID)
names(myList)=paste(thisPath,thisPathId,sep=name_delim)
myList
}
)
saveRDS(thisMset, paste0(qsDir,"/RDS_Files/",file="",thisLibrary,".RDS"))
}
)
qsFiles<-list.files(qsDir, pattern=".qs")[which(qsFiles != "compound_db.qs" || qsFiles!="master_compound_db.qs")]
sapply(qsFiles, function(f){
print(f)
thisLibrary=strsplit(f,"[.]")[[1]][1]
thisTime<-qread(file.path(qsDir,f))
thisMset <- sapply(
1:length(thisTime$name), function(x){
thisPath=thisTime[x,"name"]
thisPathId=thisTime[x,"id"]
theseMembers=list(strsplit(thisTime[x,"member"], "; ")[[1]])[[1]]
theseMembersByHMDBID = compoundsReference[compoundsReference$name %in% unlist(theseMembers), "hmdb_id"]
myList=list(theseMembersByHMDBID)
names(myList)=paste(thisPath,thisPathId,sep=name_delim)
myList
}
)
saveRDS(thisMset, paste0(qsDir,"/RDS_Files/",file="",thisLibrary,".RDS"))
}
)
which(qsFiles != "compound_db.qs" || qsFiles!="master_compound_db.qs")
qsFiles<-list.files(qsDir, pattern=".qs")[which(qsFiles %in% c("compound_db.qs","master_compound_db.qs"))]
print(qsFiles)
qsFiles<-list.files(qsDir, pattern=".qs")[which(!(qsFiles %in% c("compound_db.qs","master_compound_db.qs")))]
print(qsFiles)
qsFiles<-list.files(qsDir, pattern=".qs")[which(qsFiles != "compound_db.qs" && qsFiles!="master_compound_db.qs")]
print(qsFiles)
qsFiles<-setdiff(list.files(qsDir, pattern=".qs"),c("compound_db.qs","master_compound_db.qs"))
print(qsFiles)
qsFiles<-setdiff(list.files(qsDir, pattern=".qs"),c("compound_db.qs","master_compound_db.qs","master_syn_nms.qs"))
print(qsFiles)
qsFiles<-setdiff(list.files(qsDir, pattern=".qs"),c("compound_db.qs","master_compound_db.qs","syn_nms.qs","master_syn_nms.qs"))
print(qsFiles)
compoundsReference = qread(file.path(qsDir,"compound_db.qs"))
name_delim="_"
sapply(qsFiles, function(f){
print(f)
thisLibrary=strsplit(f,"[.]")[[1]][1]
thisTime<-qread(file.path(qsDir,f))
thisMset <- sapply(
1:length(thisTime$name), function(x){
thisPath=thisTime[x,"name"]
thisPathId=thisTime[x,"id"]
theseMembers=list(strsplit(thisTime[x,"member"], "; ")[[1]])[[1]]
theseMembersByHMDBID = compoundsReference[compoundsReference$name %in% unlist(theseMembers), "hmdb_id"]
myList=list(theseMembersByHMDBID)
names(myList)=paste(thisPath,thisPathId,sep=name_delim)
myList
}
)
saveRDS(thisMset, paste0(qsDir,"/RDS_Files/",file="",thisLibrary,".RDS"))
}
)
p=readRDS("RDS_Files/csf.RDS")
p$`3-Methylglutaconic Aciduria Type I_hMSEA0551`
p$Aids_hMSEA0553
p$`Acute Promyelocytic Leukemia_hMSEA0552`
p$`Alzheimer's Disease_hMSEA0555`
compoundsReference = qread(file.path(qsDir,"master_compound_db.qs"))
sapply(qsFiles, function(f){
print(f)
thisLibrary=strsplit(f,"[.]")[[1]][1]
thisTime<-qread(file.path(qsDir,f))
thisMset <- sapply(
1:length(thisTime$name), function(x){
thisPath=thisTime[x,"name"]
thisPathId=thisTime[x,"id"]
theseMembers=list(strsplit(thisTime[x,"member"], "; ")[[1]])[[1]]
theseMembersByHMDBID = compoundsReference[compoundsReference$name %in% unlist(theseMembers), "hmdb_id"]
myList=list(theseMembersByHMDBID)
names(myList)=paste(thisPath,thisPathId,sep=name_delim)
myList
}
)
saveRDS(thisMset, paste0(qsDir,"/RDS_Files/",file="",thisLibrary,".RDS"))
}
)
nrow(compoundsReference)
head(compoundsReference)
head(compoundsReference[,c("name")])
pp=readRDS("RDS_Files/csf.RDS")
pp$`3-Methylglutaconic Aciduria Type I_hMSEA0551`
pp$`Alzheimer's Disease_hMSEA0555`
q=qread("csf.qs")
names(q)
q$id
names(q)
